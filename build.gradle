import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
 
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
            
        }
    }
    dependencies {
        //classpath 'org.springframework.cloud:spring-clouurl "https://plugins.gradle.org/m2/"d-contract-gradle-plugin:2.1.3.RELEASE'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "com.jfrog.artifactory" version "4.8.1"
}

dependencies {
    compile project(':contract')
}


allprojects {
    //apply plugin: 'spring-cloud-contract'
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'
    
    group = 'br.com'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    targetCompatibility = '11'
    
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://repository.jboss.org/nexus/content/repositories/public/'
        }
    }

    artifactory {
        contextUrl = "https://grupodimed.jfrog.io/grupodimed"
        resolve {
            repository {
                repoKey = 'libs-release-local'
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
        }
    }

    test {
        useJUnitPlatform()
    }


    ext {
        set('springCloudVersion', "Greenwich.SR3")
    }

    dependencyManagement {
        imports {
            //mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }
    
    dependencies {
        implementation 'br.com.dimed:common-exception:1.0.3.RELEASE'
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6"
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.amqp:spring-rabbit-test'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
        testImplementation 'org.mockito:mockito-junit-jupiter:2.23.4'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.3.1'
        testCompile("junit:junit")
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude module: 'junit'
        }
        //testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    }

    
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "app-message"
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        //html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/pdv-notification-service-Dev//model/**',
                    '**/pdv-notification-service-Dev/contract/v1/model/**'
            ])
        })
    }
}


